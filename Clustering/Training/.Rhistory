tall1 <- sort(starwars$height, decreasing = TRUE)
tall1
tall2 <- starwars %>% arrange(height)
tall2
tall2 <- starwars %>% arrange(desc(height))
tall2
tall1 = tall2
tall1 == tall2
#ARRANGE
tall1 <- sort(starwars$height, decreasing = TRUE) # This just
tall2 <- starwars %>% arrange(desc(height))
tall1 == tall2
#FILTER
males1 <- subset(starwars, gender=="male" && eye_color=="blue")
males2 <- starwars %>% filter(gender=="male", eye_color=="blue")
males1==males2
males1
#FILTER
males1 <- subset(starwars, gender=="male" AND eye_color=="blue")
#FILTER
males1 <- subset(starwars, gender=="male" & eye_color=="blue")
males2 <- starwars %>% filter(gender=="male", eye_color=="blue")
tall2 <- starwars %>% arrange(desc(height))
tall2
head(tall2, n=15)
head(tall2, n=20)
head(tall2, n=25)
View(tall2)
#FILTER then ARRANGE
tallmales <- starwars %>% filter(gender=="males") %>% arrange(desc(height))
tallmales
#FILTER then ARRANGE
tallmales <- starwars %>% filter(gender=="male") %>% arrange(desc(height))
tallmales
tallfemales <- starwars %>% filter(gender=="female") %>% arrange(desc(height))
tallfemales
summary(starwars$gender)
table(starwars$gender)
hermap <- starwars %>% filter(gender=="hermaphrodite")
hermap
#Summarize and group
starwars %>% summarize(meanheight=mean(height))
?mean
#Summarize and group
starwars %>% summarize(meanheight=mean(height, na.rm = TRUE))
#Summarize and group
starwars %>% summarize(meanheight=mean(weight, na.rm = TRUE))
#Summarize and group
starwars %>% summarize(meanmass=mean(mass, na.rm = TRUE))
starwars
#Summarize and group
fatspecies <- starwars %>% group_by(species) %>% summarize(mean(mass, na.rm = TRUE))
fatspecies
View(fatspecies)
#Summarize and group
fatspecies <- starwars %>% group_by(species) %>% summarize(mean(mass, na.rm = TRUE)) %>% arrange(desc(mass))
#Summarize and group
fatspecies <- starwars %>% group_by(species) %>% summarize(mean(mass, na.rm = TRUE)) %>% arrange(desc())
#Summarize and group
fatspecies <- starwars %>% group_by(species) %>% summarize(mean(mass, na.rm = TRUE))
View(fatspecies)
#Summarize and group
fatspecies <- starwars %>% filter(!is.na(species)) %>% group_by(species) %>% summarize(mean(mass, na.rm = TRUE))
View(fatspecies)
#Summarize and group
fatspecies <- starwars %>% filter(!is.na(species)) %>% group_by(species) %>% mean(mass, na.rm = TRUE)
View(fatspecies)
#Summarize and group
fatspecies <- starwars %>% filter(!is.na(species)) %>% group_by(species) %>% summarize(mean(mass, na.rm = TRUE))
View(fatspecies)
#Summarize and group
fatspecies <- starwars %>% filter(!is.na(mass)) %>% group_by(species) %>% summarize(mean(mass, na.rm = TRUE))
View(fatspecies)
install.packages("usethis")
usethis::use_course("https://github.com/r-journalism/learn-chapter-4/archive/master.zip")
for (x in 1:10){
remDr$navigate("https://interactive.aljazeera.com/aje/2018/flying-to-hajj-2018/index.html")
ran <- runif(1, 30, 75)
Sys.sleep(ran)
}
library("RSelenium")
driver<- rsDriver()
for (x in 1:10){
remDr$navigate("https://interactive.aljazeera.com/aje/2018/flying-to-hajj-2018/index.html")
ran <- runif(1, 30, 75)
Sys.sleep(ran)
}
remDr <- driver[["client"]]
for (x in 1:10){
remDr$navigate("https://interactive.aljazeera.com/aje/2018/flying-to-hajj-2018/index.html")
ran <- runif(1, 30, 75)
Sys.sleep(ran)
}
library("RSelenium")
driver<- rsDriver()
remDr <- driver[["client"]]
for (x in 1:10){
remDr$navigate("https://interactive.aljazeera.com/aje/2018/coding-like-a-girl/index.html#")
ran <- runif(1, 30, 75)
Sys.sleep(ran)
}
install.packages("edawr")
library(dplyr)
ds1 <- data.frame(c(2,3,4,5,5,6),c("santa","santa2","santa3","santa5","santa6"),c(TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE))
ds1 <- data.frame(c(2,3,4,5,5,6),c("santa","santa2","santa3","santa5","santa6","santa7"),c(TRUE, FALSE, TRUE, TRUE, TRUE, FALSE))
ds2 <- data.frame(c(6,7,1,2,5,6),c("asanta","asanta2",NA,"asanta5","asaanta6","santa7"),c(TRUE, NA, TRUE, TRUE, TRUE, FALSE))
?gather
library(dplyr)
?dplyr::gather
??gather
library(tidyr)
?gather
gs1<- ds1 %>% gather()
gs1<- ds1 %>% spread()
?spread
?separate
ds1
names(ds1) <- c("numbers","names","bools")
ds1
gs1 <- ds1 %>% separate(names, c("ant"))
gs1
gs1 <- ds1 %>% separate(names, c("ta5"))
gs1
gs1 <- ds1 %>% separate(names, c("first","second"),sep="ta")
gs1
d1 <- ds1 %>% select("numbers")
d1
d2 <- ds1 %>% filter(numbers >3)
d2
d3 <- ds1 %>% group_by(numbers)
d3
d4 <- ds1 %>% summarise(numbers)
d5 <- ds1 %>% arrange(numbers)
d5
d5 <- ds1 %>% arrange(bools)
d5
d5 <- ds1 %>% arrange(names)
d5
d5 <- ds1 %>% arrange(numbers)
d7 <- ds1 %>% join(numbers,names)
d7
d1 <- ds2 %>% select("numbers") %>% starts_with("sa", ignore.case = TRUE):
d1
names(ds2) <- c("numbers","names","bools")
d1 <- ds2 %>% select("numbers") %>% starts_with("sa", ignore.case = TRUE):
d1
d1 <- ds2 %>% select(c(numbers,bools))
d1
d2_1 <- ds1 %>% filter(numbers >3, bools==TRUE)
d2_1
d2_2 <- ds1 %>% filter(numbers >3, bools==TRUE)
d2_2
d2_1 <- ds1 %>% filter(numbers >3)
d2_1
d2_3 <- ds1 %>% filter(numbers >3, names %in% c("ant"))
d2_3
d2_3 <- ds1 %>% filter(numbers >3, names %in% c("santa"))
d2_1
d2_2
d2_3
d2_3 <- ds1 %>% filter(names %in% c("santa"))
d2_1
d2_2
d2_3
d2_3 <- ds2 %>% filter(names ==is.na)
d2_3 <- ds2 %>% filter(is.na)
d2_3 <- ds2 %>% filter(names is.na)
d2_3 <- ds2 %>% filter(names == is.na)
dist <- ds1 %>% distinct()
dist
rans <- ds1 %>% sample_frac(0.5, replace=TRUE)
rans
rans <- ds1 %>% sample_frac(0.1, replace=TRUE)
rans
rans <- ds1 %>% sample_frac(1, replace=TRUE)
rans
rans <- ds1 %>% sample_n(2, replace=TRUE)
rans
slic <- ds1 %>% slice(3:4)
slic
topn <- ds1 %>% top_n()
topn <- ds1 %>% top_n(2)
topn <- ds1 %>% top_n(numbers,2)
topn <- ds1 %>% top_n(ds1,2,numbers)
topn
#https://rstudio-pubs-static.s3.amazonaws.com/109948_876c577ae6424d47b529fce960db7bf4.html#48
ds1 <- data.frame(c(2,3,4,5,5,6),c("santa","santa","santa3","santa5","santa6","santa7"),c(TRUE, FALSE, TRUE, TRUE, TRUE, FALSE))
d3 <- ds1 %>% group_by(names)
d3
names(ds1) <- c("numbers","names","bools")
names(ds2) <- c("numbers","names","bools")
d3 <- ds1 %>% group_by(names)
d3
d4 <- ds1 %>% summarise(biggest=max(number))
d4
d4 <- ds1 %>% summarise(biggest=max(number))
d4 <- ds1 %>% summarise(biggest=max(numbers))
d4
d4 <- ds1 %>% summarise(biggest=max(numbers), median(numbers))
d4
d4 <- ds1 %>% summarise(max=max(numbers), median=median(numbers))
d4
d4 <- ds1 %>% summarise(max=max(numbers), median=median(numbers), n=n())
d4
d4 <- ds1 %>% summarise(min=min(numbers), median=median(numbers), n=n())
d4
d6 <- ds1 %>% mutate(happy=TRUE)
d6
d6 <- ds1 %>% transmute(happy=TRUE)
d6
d6 <- ds1 %>% mutate_each(funs(min_rank))
d6
print ("helloworld")
x <- 1:4
y <- c(4,5,6)
seq(30,0, by=-3)
seq(10,0, by=-1)
seq(10,0, length.out=5)
seq(10,0, length.out=12)
seq(10,0, length.out=2)
seq(10,0, length.out=3)
seq(10,0, length.out=4)
rep(1:2, times=10)
rep(1:2, each=5)
rm(x)
rm(list=ls())
install.packages(keras)
?mean #Get help about a specific function
help.search("weighted mean") #Help about a specific phrase
help(package="dplyr") #Help about a specific package
dset <- data.frame(gender,education,age)
gender <- c(1,0,0,1,1,0,0,1,0,1)
education <- c(1,2,1,2,3,4,4,2,1,1)
age <- c(1,2,1,3,4,2,1,3,2,1)
dset <- data.frame(gender,education,age)
set.seed(1)
my_iris <- iris[-5]
iris
my_iris
species <- iris$Species
species
kmeans_dset <- kmeans(dset,3)
table(dset$cluster)
table(dset)
iris
typeof(iris)
typeof(dset)
dset
kmeans_dset <- kmeans(dset,3)
table(kmeans_dset)
table(kmeans_dset$cluster)
floor(runif(3, min=0, max=101))
floor(runif(3, min=0, max=1))
floor(runif(3, min=0, max=2))
genderz <-floor(runif(3, min=0, max=2))
hist(genderz)
genderz <-floor(runif(100, min=0, max=2))
hist(genderz)
genderz <-floor(runif(1000, min=0, max=2))
hist(genderz)
genderz
g <-floor(runif(1000, min=0, max=2))
e <-floor(runif(1000, min=0, max=5))
a <-floor(runif(1000, min=0, max=6))
hist(g)
hist(e)
hist(a)
dset <- data.frame(g,e,a)
kmeans_dset <- kmeans(dset,3)
table(kmeans_dset$cluster)
table(dset)
plot(a ~ e, data = dset, col = kmeans_dset$cluster)
plot(g ~ e, data = dset, col = kmeans_dset$cluster)
plot(a ~ e, data = dset, col = kmeans_dset$cluster)
plot(a ~ g, data = dset, col = kmeans_dset$cluster)
plot(a ~ e, data = dset, col = kmeans_dset$cluster)
kmeans_dset <- kmeans(dset,3, nstart=20)
table(kmeans_dset$cluster)
summary(kmeans_dset)
kmeans_dset
kmeans_dset <- kmeans(dset,3, nstart=20)
kmeans_dset
summary(kmeans_dset)
table(kmeans_dset$cluster)
plot(cars)
plot(cars)
#Import the data
gender <- c(1,0,0,1,1,0,0,1,0,1)
education <- c(1,2,1,2,3,4,4,2,1,1)
age <- c(1,2,1,3,4,2,1,3,2,1)
#Import the data
gender <- c(1,0,0,1,1,0,0,1,0,1)
education <- c(1,2,1,2,3,4,4,2,1,1)
age <- c(1,2,1,3,4,2,1,3,2,1)
#Clean and reformat the data
dset <- data.frame(gender,education,age)
kmeans_dset <- kmeans(dset,3, nstart=20)
kmeans_dset
summary(kmeans_dset)
table(kmeans_dset$cluster)
plot(age ~ education, data = dset, col = kmeans_dset$cluster)
#### Initialize total within sum of squares error
wss <- 0
for (i in 1:15) {
km.out <- kmeans(dset, centers = i, nstart=20)
# Save total within sum of squares to wss variable
wss[i] <- km.out$tot.withinss
}
for (i in 1:10) {
km.out <- kmeans(dset, centers = i, nstart=20)
# Save total within sum of squares to wss variable
wss[i] <- km.out$tot.withinss
}
for (i in 1:9) {
km.out <- kmeans(dset, centers = i, nstart=20)
# Save total within sum of squares to wss variable
wss[i] <- km.out$tot.withinss
}
plot(1:9, wss, type = "b",
xlab = "Number of Clusters",
ylab = "Within groups sum of squares")
for (i in 1:8) {
km.out <- kmeans(dset, centers = i, nstart=20)
# Save total within sum of squares to wss variable
wss[i] <- km.out$tot.withinss
}
plot(1:8, wss, type = "b",
xlab = "Number of Clusters",
ylab = "Within groups sum of squares")
plot(1:8, wss, type = "b",
xlab = "Number of Clusters",
ylab = "Within groups sum of squares")
install.packages("readr")
library("readr")
pdata <- read_csv("pokemon.csv")
setwd("~/Google Drive/2018Code/R/PersonaAnalysis/Clustering/Training")
setwd("~/Google Drive/2018Code/R/PersonaAnalysis/Clustering/Training")
pdata <- read_csv("pokemon.csv")
pdata
kdata <- kmeans(pdata, 5, nstart=20)
summary(kdata)
kdata <- kmeans(pdata, 5, nstart=20)
head(pdata)
pdata <- pdata[-1:3]
pdata <- pdata[-(1:3)]
pdata
pdata <- read_csv("pokemon.csv")
pdata <- pdata[-(1:4)]
pdata
pdata <- pdata[-8]
kdata <- kmeans(pdata, 5, nstart=20)
pdata
head(pdata)
pdata <- read_csv("pokemon.csv")
head(pdata)
pdata <- pdata[-(1:4)]
kdata <- kmeans(pdata, 5, nstart=20)
summary(kdata)
kdata$cluster
plot(kdata, col=kdata$cluster)
plot(Total ~ Attack kdata, col=kdata$cluster)
plot(Total ~ Attack, kdata, col=kdata$cluster)
plot(Total ~ Attack, pdata, col=kdata$cluster)
dim(pdata)
ncol(pdata)
colnames(pdata)
plot(Defense ~ Attack, pdata, col=kdata$cluster)
plot(Speed ~ Attack, pdata, col=kdata$cluster)
for (i in 1:15){
kdata <- kmeans(pdata, i, nstart=20)
wss[i] <- kdata$tot.withinss
}
plot(1:15, wss, type = "b",
xlab = "Number of Clusters",
ylab = "Within groups sum of squares")
kdata <- kmeans(pdata, 3, nstart=20)
plot(Speed ~ Attack, pdata, col=kdata$cluster)
for (i in 1:15){
kdata <- kmeans(pdata, i, nstart=50)
wss[i] <- kdata$tot.withinss
}
plot(1:15, wss, type = "b",
xlab = "Number of Clusters",
ylab = "Within groups sum of squares")
kdata <- kmeans(pdata, 3, nstart=50)
plot(Speed ~ Attack, pdata, col=kdata$cluster)
pdata <- read_csv("pokemon.csv")
head(pdata)
colnames(pdata)
pdata <- pdata[-(1:4)]
pdata
pdata <- read_csv("pokemon.csv")
head(pdata)
colnames(pdata)
pdata <- pdata[5:11]
pdata
pdata <- read_csv("pokemon.csv")
head(pdata)
colnames(pdata)
pdata <- pdata[5:11]
kdata <- kmeans(pdata, 3, nstart=50)
summary(kdata)
plot(Speed ~ Attack, pdata, col=kdata$cluster)
#how many clusters?
wss <- 0
for (i in 1:15){
kdata <- kmeans(pdata, i, nstart=50)
wss[i] <- kdata$tot.withinss
}
plot(kdata[, c("Defense", "Speed")],
col = km.out$cluster,
main = paste("k-means clustering of Pokemon with", k, "clusters"),
xlab = "Defense", ylab = "Speed")
plot(pdata[, c("Defense", "Speed")],
col = km.out$cluster,
main = paste("k-means clustering of Pokemon with", k, "clusters"),
xlab = "Defense", ylab = "Speed")
plot(pdata[, c("Defense", "Speed")],
col = km.out$cluster,
main = paste("k-means clustering of Pokemon with", 3, "clusters"),
xlab = "Defense", ylab = "Speed")
for (i in 1:15){
kdata <- kmeans(pdata, i, nstart=50)
wss[i] <- kdata$tot.withinss
}
for (i in 1:15){
kdata <- kmeans(pdata, i, nstart = 20, iter.max = 50)
wss[i] <- kdata$tot.withinss
}
plot(pdata[, c("Defense", "Speed")],
col = km.out$cluster,
main = paste("k-means clustering of Pokemon with", 3, "clusters"),
xlab = "Defense", ylab = "Speed")
kdata <- kmeans(pdata, 3, nstart=50)
#Run the kmeans algorithm with 3 clusters
kdata <- kmeans(pdata, 3, nstart=50)
summary(kdata)
for (i in 1:15){
kdata <- kmeans(pdata, i, nstart = 20, iter.max = 50)
wss[i] <- kdata$tot.withinss
}
#how many clusters should we have?
wss <- 0
for (i in 1:15){
kdata <- kmeans(pdata, i, nstart = 20, iter.max = 50)
wss[i] <- kdata$tot.withinss
}
plot(1:15, wss, type = "b",
xlab = "Number of Clusters",
ylab = "Within groups sum of squares")
kdata <- kmeans(pdata, centers = 3, nstart = 20, iter.max = 50)
# View the resulting model
kdata
# Plot of Defense vs. Speed by cluster membership
plot(pdata[, c("Defense", "Speed")],
col = kdata$cluster,
main = paste("k-means clustering of Pokemon with", 3, "clusters"),
xlab = "Defense", ylab = "Speed")
#Calculate the distance between 2 values
dist_matrix <- dist(x)
x<-rep(1:2, each=5)
g<- c(1,0,1,1,1,0,1,0,1,1)
e<- c(1,2,1,2,1,1,1,2,2,1)
a<- c(1,2,1,2,1,1,1,2,2,1)
dset <- data.frame(g,e,a)
kmeans_dset <- kmeans(dset,3, nstart=20)
kmeans_dset
summary(kmeans_dset)
table(kmeans_dset$cluster)
plot(a ~ e, data = dset, col = kmeans_dset$cluster)
kmeans_dset
kmeans_dset$cluster
two_players <- data.frame(c(0,0),c(9,12))
two_players
names(two_players) <- c("name1", "name2")
two_players
dist_matrix <- dist(two_players)
hclust(d=dist_matrix)
dist_matrix
dist_matrix <- dist(two_players, methods = "euclidean")
dist_matrix <- dist(two_players, method = "euclidean")
dist_matrix
two_players
two_players
dist_matrix <- dist(two_players, method = "euclidean")
dist_matrix
two_players <- data.frame(c(0,9),c(0,12))
names(two_players) <- c("name1", "name2")
two_players
dist_matrix <- dist(two_players, method = "euclidean")
dist_matrix
############################# Categorical data
df <- data.frame(c(TRUE, FALSE, TRUE),c(TRUE, TRUE, FALSE),c(FALSE, TRUE, TRUE), c(FALSE, TRUE, FALSE))
df
names(df)<- c("wine","beer","whiskey","vodka")
df
dist (df, method="binary")
install.packages("dummies")
library(dummies)
du <- data.frame(c("red", "soccer"),c("green", "hockey"),c("blue","hockey"), c("blue", "soccer"))
dummy.data.frame(du)
names(du) <- c("color","sport")
dummy.data.frame(du)
du <- data.frame(c("red", "soccer"),c("green", "hockey"),c("blue","hockey"), c("blue", "soccer"))
names(du) <- c("color","sport")
du
du <- data.frame(c("red","green","blue","blue"),c("soccer", "hockey", "hockey", "soccer"))
names(du) <- c("color","sport")
du
dummy.data.frame(du)
dummy_du <- dummy.data.frame(du)
dist(dummy_du, method="binary")
